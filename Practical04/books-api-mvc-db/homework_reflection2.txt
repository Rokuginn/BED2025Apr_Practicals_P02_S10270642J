### Reflection on Robustness & Security

Impact of Input Validation Middleware:
Implementing input validation middleware makes the API more reliable by catching invalid or malformed data before it reaches the database. This prevents runtime errors and ensures that only valid data is processed. For example, if a client tries to create a book with an empty title, the validation middleware will return a 400 error with a clear message, rather than allowing the invalid data to cause a database error.

Parameterized Queries and SQL Injection:
Parameterized queries prevent SQL injection by separating SQL code from user input. Instead of building SQL strings by concatenating variables (which could allow malicious input to alter the query), parameterized queries use placeholders and bind user data safely. This means user input is always treated as data, not executable code, making it fundamentally more secure.

Robust Error Handling and Security Risks:
Robust error handling helps mitigate security risks by not exposing sensitive information in error messages. For example, if a database error occurs, returning a generic error message (like "Internal Server Error") instead of the full stack trace prevents attackers from learning about the database structure or server configuration. This reduces the risk of targeted attacks such as brute-force attempts or exploiting known vulnerabilities.